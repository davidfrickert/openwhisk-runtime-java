/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

repositories {
    maven {
        credentials {
            username 'master'
            password 'P/y70sOrRK0jggItF6l2gVV+pQGeRl/gQJjYQobQNX4zS60S4Oq4AfOrz3yWPLm4'
        }
        url 'http://10.147.18.110:8083/snapshots'
        authentication {
            basic(BasicAuthentication)
        }
    }

    mavenCentral()
}

dependencies {
    compile 'com.google.code.gson:gson:2.8.6'
    compile 'org.javassist:javassist:3.28.0-GA'
    compile group: 'com.dfrickert', name: 'simpleminioclient', version: '0.0.4-SNAPSHOT'
    compile group: 'org.tensorflow', name: 'tensorflow', version: '1.5.0'

    // Metrics support
    compile group: 'io.micrometer', name: 'micrometer-core', version: '1.6.6'
    compile group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.6.6'
    compile group: 'io.prometheus', name: 'simpleclient_pushgateway', version: '0.10.0'
}

jar {
    manifest {
        attributes('Main-Class': 'org.apache.openwhisk.runtime.java.action.Proxy')
    }
}

task oneJar(type: Jar) {
    manifest.from jar.manifest
    classifier = 'all'
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

buildscript {
    dependencies {
        classpath files('gradle-trust-all.jar')
    }
}

apply plugin: 'trust-all'
